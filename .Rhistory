setwd("..")
install("/cloud/project/")
# Process Documentation
#setwd("..")
setwd("/cloud/project/")
document()
# Process Documentation
#setwd("..")
setwd("/cloud/project/")
document()
# Formally install
setwd("..")
install("/cloud/project/")
# Load
library(simulate)
library(simulate) # for tidy simulation!
library(tidyverse) # for tidy data wrangling and visualization!
m <- mtcars %>%
mutate(cyl = factor(cyl)) %>%
lm(formula = mpg ~ hp + cyl)
knitr::opts_chunk$set(
collapse = FALSE,
comment = "#>",
message = FALSE, warning = FALSE, echo = FALSE
)
m <- mtcars %>%
mutate(cyl = factor(cyl)) %>%
lm(formula = mpg ~ hp + cyl)
e <- m %>%
equate()
# for example,
m %>%
equate(reps = 200, seed = 12345)
# for example,
m %>%
equate(reps = 5, seed = 12345)
# for example,
m %>%
equate(reps = 5, seed = 12345) %>%
kable(format = "html")
library(knitr) # for tables/knitting/images
library(DiagrammeR) # for mermaid diagrams
# for example,
m %>%
equate(reps = 5, seed = 12345) %>%
kable(format = "html")
# for example,
m %>%
equate(reps = 5, seed = 12345) %>%
kable(format = "html", booktabs = TRUE)
c <- e %>%
calculate(setx = list(hp = c(100, 150, 200)))
c %>% head()
c %>% head() %>% kable(format = "html", booktabs = TRUE)
library(tidyverse)
install.packages("hexSticker")
install.packages("fontawesome")
mtcars
m <- mtcars %>%
mutate(cyl = factor(cyl)) %>%
lm(formula = mpg ~ hp + cyl)
myequations <- m %>% equate()
mycalc <- myequations %>%
calculate(setx = list(hp = c(100, 150, 200)))
mycalc %>% head()
simulate
mysim <- mycalc %>% simulate()
mysim %>% head()
mysim %>% head() %>% kable(format = "html", bookdown = TRUE)
mysim %>% head() %>% kable(format = "html", booktabs = TRUE)
mysim %>% head()
mysim %>%
ggplot(mapping = aes(x = case, y = ev)) +
geom_jitter()
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = case, fill = case)) +
geom_jitter() +
geom_crossbar(alpha = 0.5)
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = case, fill = case)) +
geom_jitter() +
geom_violin(alpha = 0.5)
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = case, fill = case, group = case)) +
geom_jitter() +
geom_violin(alpha = 0.5)
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = case, fill = case, group = case)) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5)
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = case, group = case)) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5)
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5)
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
fill = "Conditions") +
scale_color_manual(breaks = c("1" = "One", "2" = "Two", "3" = "Three"))
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
fill = "Conditions") +
guides(fill = guide_legend(label = "Bird"))
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
fill = "Conditions") +
guides(fill = guide_legend(breaks = c("3", "2", "1")))
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
fill = "Conditions") +
scale_fill_viridis_b()
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
fill = "Conditions") +
scale_color_viridis_b()
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
fill = "Conditions") +
scale_color_viridis_b(discrete = TRUE)
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
fill = "Conditions") +
scale_color_discrete()
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
fill = "Conditions") +
scale_color_discrete(breaks = c("1" = "100 hp", "2" = "150 hp", "3" = "200 hp"))
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
fill = "Conditions") +
scale_color_discrete(
breaks = c("1" = "100 hp", "2" = "150 hp", "3" = "200 hp"),
labels = c("100 hp", "150 hp", "200 hp"))
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
fill = "Conditions") +
scale_color_discrete(
breaks = c("1", "2", "3"),
labels = c("100 hp", "150 hp", "200 hp"))
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
color = "Conditions") +
scale_color_discrete(
breaks = c("1", "2", "3"),
labels = c("100 hp", "150 hp", "200 hp"))
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
color = "Conditions") +
scale_x_discrete(
breaks = c("1", "2", "3"),
labels = c("100 hp", "150 hp", "200 hp"))
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
color = "Conditions") +
scale_x_continuous(
breaks = c("1", "2", "3"),
labels = c("100 hp", "150 hp", "200 hp"))
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
color = "Conditions") +
scale_x_continuous(
breaks = c("1", "2", "3"),
labels = c("100 hp", "150 hp", "200 hp"))
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
color = "Conditions") +
scale_x_continuous(
breaks = c(1, 2, 3),
labels = c("100 hp", "150 hp", "200 hp"))
mysim %>%
ggplot(mapping = aes(x = case, y = ev, color = factor(case), group = factor(case) )) +
geom_jitter() +
geom_violin(fill = "white", alpha = 0.5) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
color = "Conditions") +
scale_x_continuous(
breaks = c(1, 2, 3),
labels = c("100 hp", "150 hp", "200 hp")) +
guides(color = "none")
mysim %>% head()
mysim %>%
illustrate(qi = "ev")
mybands <- mysim %>%
illustrate(qi = "ev")
mybands %>% head()
mybands <- mysim %>%
group_by(case) %>%
illustrate(qi = "ev")
mybands %>% head()
mybands %>%
ggplot(mapping = aes(x = case, ymin = lower, ymax = upper, group = group, fill = ci)) +
geom_ribbon()
mybands %>%
ggplot(mapping = aes(x = case, ymin = lower, ymax = upper, group = group, fill = ci)) +
geom_ribbon() +
scale_fill_brewer(type = "Blues")
mybands %>%
ggplot(mapping = aes(x = case, ymin = lower, ymax = upper, group = group, fill = ci)) +
geom_ribbon() +
scale_fill_brewer(palette = "Blues")
mybands %>%
ggplot(mapping = aes(x = case, ymin = lower, ymax = upper, group = group, fill = ci)) +
geom_ribbon(alpha = 0.5) +
scale_fill_brewer(palette = "Blues")
mybands %>%
ggplot(mapping = aes(x = case, ymin = lower, ymax = upper, group = group, fill = ci)) +
geom_ribbon(alpha = 0.5) +
scale_fill_brewer(palette = "Blues", direction = -1)
mybands %>%
ggplot(mapping = aes(x = case, ymin = lower, ymax = upper, group = group, fill = ci)) +
geom_ribbon(alpha = 0.5) +
scale_fill_viridis_b()
mybands %>%
ggplot(mapping = aes(x = case, ymin = lower, ymax = upper, group = group, fill = ci)) +
geom_ribbon(alpha = 0.5) +
scale_fill_brewer(palette = "Blues")
mybands %>%
ggplot(mapping = aes(x = case, ymin = lower, ymax = upper, group = group, fill = ci)) +
geom_ribbon(alpha = 0.5, color = "black") +
scale_fill_brewer(palette = "Blues")
mybands %>%
ggplot(mapping = aes(x = case, ymin = lower, ymax = upper, group = group, fill = ci)) +
geom_ribbon(alpha = 0.5, color = "black") +
scale_fill_brewer(palette = "Blues") +
# Relabel the x-axis's case variable as needed
scale_x_continuous(
breaks = c(1, 2, 3),
labels = c(100, 150, 200)) +
labs(x = "Level of Horsepower", fill = "Confidence\nInterval")
mybands %>%
ggplot(mapping = aes(x = case, ymin = lower, ymax = upper, group = group, fill = ci)) +
geom_ribbon(alpha = 0.5, color = "black") +
scale_fill_brewer(palette = "Blues") +
# Relabel the x-axis's case variable as needed
scale_x_continuous(
breaks = c(1, 2, 3),
labels = c(100, 150, 200)) +
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
fill = "Confidence\nInterval")
myequations %>% head()
myequations %>%
illustrate(qi = "hp")
myequations %>%
as_tibble() %>%
illustrate(qi = "hp")
myequations %>%
illustrate(qi = "hp")
# Remove, Rinse, and Repeat
detach("package:simulate", unload = TRUE)
uninstall("simulate")
.rs.restartR()
library(devtools)
library(roxygen2)
# Process Documentation
#setwd("..")
setwd("/cloud/project/")
document()
# Formally install
setwd("..")
install("/cloud/project/")
# Load
library(simulate)
library(simulate) # for tidy simulation!
library(tidyverse) # for tidy data wrangling and visualization!
myequations %>%
illustrate(qi = "hp")
mybands <- mysim %>%
group_by(case) %>%
illustrate(qi = "ev")
mybands %>% head()
mybands %>%
# Map aethestics
ggplot(mapping = aes(x = case, ymin = lower, ymax = upper, group = group, fill = ci)) +
# Make a pretty ribbon for each group!
geom_ribbon(alpha = 0.5, color = "black") +
# Shade the ribbon!
scale_fill_brewer(palette = "Blues") +
# Relabel the x-axis's case variable as needed
scale_x_continuous(
breaks = c(1, 2, 3),
labels = c(100, 150, 200)) +
# Add lables
labs(x = "Level of Horsepower", y = "Expected Mileage (mpg)",
fill = "Confidence\nInterval")
myequations %>%
illustrate(qi = "hp")
attribute(myequations)
attributes(myequations)
uninstall("simulate")
# Remove, Rinse, and Repeat
detach("package:simulate", unload = TRUE)
uninstall("simulate")
.rs.restartR()
library(devtools)
library(roxygen2)
# Process Documentation
#setwd("..")
setwd("/cloud/project/")
document()
# Formally install
setwd("..")
install("/cloud/project/")
# Load
library(simulate)
library(simulate) # for tidy simulation!
library(tidyverse) # for tidy data wrangling and visualization!
myequations %>%
illustrate(qi = "hp")
myequations %>%
illustrate(qi = "hp") %>%
head()
myequations %>%
illustrate(qi = "hp") %>%
head(3)
mysim %>%
tabulate(qi = "ev", ci = 0.95, mu = 0)
mysim %>%
tabulate(qi = "ev", ci = 0.95)
mtcars$mpg %>% mean()
mtcars$mpg %>% median()
mysim %>%
group_by(case) %>%
tabulate(qi = "ev", ci = 0.95, mu = 0)
mysim %>%
group_by(case) %>%
tabulate(qi = "ev", ci = 0.95, mu = 19.2)
mysim %>%
head()
mysim %>%
group_by(replicate) %>%
summarize(fd = ev[case == 3] - ev[case == 1])
mysim %>%
pivot_wider(id_cols = c(replicate), names_from = case, values_from = ev) %>%
head()
mysim %>%
pivot_wider(id_cols = c(replicate), names_from = case, values_from = ev, names_prefix = "ev_") %>%
head()
mysim %>%
pivot_wider(id_cols = c(replicate), names_from = case, values_from = ev, names_prefix = "ev_") %>%
mutate(fd = ev_3 - ev_1)
myfd <- mysim %>%
pivot_wider(id_cols = c(replicate), names_from = case, values_from = ev, names_prefix = "ev_") %>%
mutate(fd = ev_3 - ev_1)
mysim %>%
group_by(replicate) %>%
summarize(fd = ev[case == 3] - ev[case == 1]) %>%
head()
mysim %>%
group_by(replicate) %>%
summarize(fd = ev[case == 3] - ev[case == 1]) %>%
head(3)
mysim %>%
group_by(replicate) %>%
summarize(
ev_1 = ev[case == 1],
ev_3 = ev[case == 3],
fd = ev_3 - ev_1) %>%
head(3)
myequations %>%
tabulate(qi = "hp")
myequations %>%
tabulate(qi = "hp", ci = 0.95, mu = 0)
myequations %>%
tabulate(qi = "hp", ci = 0.95, mu = 0)
myequations %>%
tabulate(ci = 0.95, mu = 0)
citation("simulate")
# Using a sample dataset
mtcars %>%
# Make a model
mutate(cyl = factor(cyl)) %>%
lm(formula = mpg ~ hp + cyl) %>%
# Simulate estimate uncertainty
equate() %>%
# Calculate predictions from simulated equations
calculate(setx = list(hp = c(100, 150, 200))) %>%
# Simulate fundamental uncertainty
simulate() %>%
# summarize results
tabulate(qi = "ev")
# Using a sample dataset
mtcars %>%
# Make a model
mutate(cyl = factor(cyl)) %>%
lm(formula = mpg ~ hp + cyl) %>%
# Simulate estimate uncertainty
equate() %>%
# Calculate predictions from simulated equations
calculate(setx = list(hp = c(100, 150, 200))) %>%
# Simulate fundamental uncertainty
simulate() %>%
# summarize results for each setx case
group_by(case) %>%
tabulate(qi = "ev")
# Remove, Rinse, and Repeat
detach("package:simulate", unload = TRUE)
uninstall("simulate")
.rs.restartR()
library(devtools)
library(roxygen2)
library(devtools)
library(roxygen2)
# Process Documentation
#setwd("..")
setwd("/cloud/project/")
document()
# Formally install
setwd("..")
install("/cloud/project/")
# Load
library(simulate)
uninstall("simulate")
# Remove, Rinse, and Repeat
detach("package:simulate", unload = TRUE)
uninstall("simulate")
.rs.restartR()
library(devtools)
library(roxygen2)
# Process Documentation
#setwd("..")
setwd("/cloud/project/")
document()
# Formally install
setwd("..")
install("/cloud/project/")
# Process Documentation
#setwd("..")
setwd("/cloud/project/")
document()
# Formally install
setwd("..")
.rs.restartR()
library(credentials)
credentials::set_github_pat("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")
credentials::set_github_pat("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")
library(credentials)
credentials::set_github_pat("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")
rmarkdown::render('vignettes/simulate.Rmd', 'markdown')
getwd()
setwd("/cloud/project/")
rmarkdown::render('vignettes/simulate.Rmd', 'markdown')
rmarkdown::render('vignettes/simulate.Rmd', 'md')
# Process Documentation
#setwd("./simulate")
setwd(".")
document()
# Process Documentation
#setwd("./simulate")
setwd(".")
document()
# Process Documentation
#setwd("./simulate")
setwd(".")
document()
# Formally install
setwd("..")
# Process Documentation
#setwd("./simulate")
setwd(".")
document()
# Process Documentation
#setwd("./simulate")
setwd(".")
document()
